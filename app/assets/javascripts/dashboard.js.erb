$(window).bind('page:change', function () {
    initDashboard();
});
function initDashboard() {
    var current_project_id = $('#dashboard').attr('data-project-id');
    if (current_project_id == '') {
        popupMessage('Internal Error', 'error');
    }
    $('#dashboard .task-content').sortable({
        item: '.task-item',
        connectWith: '#dashboard .task-content',
        placeholder: 'placeholder',
        activeClass: 'ui-state-hover',
        hoverClass: 'ui-state-active',
        update: function (event, ui){
            console.log($(this).sortable('serialize'));
            task_id = $(ui.helper).attr('data-task-id');
            updateposition($(this).sortable('serialize'))
        }

    });

    $('#dashboard .task-content').droppable({
        accept: ':not(.ui-sortable-helper)',
        activeClass: 'ui-state-hover',
        hoverClass: 'ui-state-active',
        tolerance: 'intersect',
        greedy: true,
        drop: function (event, ui) {
            $(this).append(ui.helper);
            dropZone = $(event.target);
            status = dropZone.attr('data-task-status');
            task_id = $(ui.helper).attr('data-task-id');
            updateTask('status_id', status, task_id);
        },
        accept: function (elem) {
            return !$(this).has(elem).length;
        }
    });

    $('.add-attachment').droppable({
        activeClass: 'ui-state-hover',
        hoverClass: 'ui-state-active',
        tolerance: 'intersect',
        greedy: true,
        drop: function (event, ui) {
            console.log($(event.target));
        }
    });

    //$('.notification-list').perfectScrollbar();

    $('.project-title').click(function () {
        id = $(this).attr('data-id');
        $.ajax({
            url: '/projects/' + id + '/edit',
            type: 'get',
            success: function (res) {
                $('#small-modal .modal-header').text('Project');
                $('#small-modal .modal-body').html(res);
                $('#small-modal').modal('show');
            }
        });
    });

    $(document).off('dblclick', '.task-item').on('dblclick', '.task-item', function () {
        task_id = $(this).attr('data-task-id');
        if (task_id == '') {
            popupMessage('internal error', 'error');
            return false;
        }
        $.ajax({
            url: '/projects/' + current_project_id + '/tasks/' + task_id,
            type: 'get',
            dataType: 'script',
            success: function (res) {

            }
        });
    });

    $(document).off('change', '.file_upload').on('change', '.file_upload', function (e) {
        var ofile = this.files[0];
        var formdata;
        if (FormData) {
            formdata = new FormData();
            formdata.append('attachment[file]', ofile);
        }
        task_id = $(this).attr('data_task_id');
        if (task_id == '') {
            popupMessage('Error', 'error');
        }
        $.ajax({
            url: '/tasks/' + task_id + '/attachments',
            data: formdata,
            type: 'POST',
            success: function (res) {
                $('#response').html(res);
            },
            error: function (xhr, rrr, error) {
                alert(error);
            },
            processData: false,
            contentType: false
        });
    });

    var old_value = '', new_value = '';
    $(document).off('click', '.task-description').on('click', '.task-description', function () {
        old_value = $(this).text().trim();
        $(this).addClass('editable-content');
    });

    $(document).off('blur', '.task-description').on('blur', '.task-description', function () {
        new_value = $(this).text().trim();
        $(this).removeClass('editable-content');
        if (old_value != new_value) {
            task_id = $('.task-details').attr('data-task-id');
            updateTask('description', new_value, task_id);
        }
    });

    var old_title = '', new_title = '';
    $(document).off('dblclick', '.task-name.task-detail-title').on('dblclick', '.task-name.task-detail-title', function () {
        old_title = $(this).text().trim();
        $(this).attr("contenteditable", '');
        $(this).addClass('task-detail-title-edit');
    });

    $(document).off('blur', '.task-name.task-detail-title').on('blur', '.task-name.task-detail-title', function () {
        new_title = $(this).text().trim();
        $(this).removeAttr("contenteditable");
        $(this).removeClass('task-detail-title-edit');
        if (old_title != new_title) {
            task_id = $('.task-details').attr('data-task-id');
            updateTask('title', new_title, task_id);
            old_title = ''; new_title = '';
        }
    });

    $(document).off('click', '.edit-task-label a').on('click', '.edit-task-label a', function () {
        if(!$(this).hasClass('active')) {
            task_id = $('.task-details').attr('data-task-id');
            $('.edit-task-label a').removeClass('active');
            $(this).addClass('active');
            updateTask('task_type', $(this).attr('data-value'), task_id);
        }
    });

    /* Edit task effort value */

    $(document).off('click', '.task-priority').on('click', '.task-priority', function () {
        $('.priority-dropdown').toggle();
    });

    $(document).off('blur', '.progress-effort, .progress-spend').on('blur', '.progress-effort, .progress-spend', function () {
        var progress = $(this).text().trim();
        var field = $(this).attr('data-task-field').trim();
        task_id = $('.task-details').attr('data-task-id');
        updateTask(field, progress, task_id);
    });

    $(document).on('keypress', '.progress-effort, .progress-spend', function (e) {
        if (e.which == 13) {
            return false;
        }
    });

    $(document).off('change', '.edit-end-date').on('change', '.edit-end-date', function () {
        task_id = $('.task-details').attr('data-task-id');
        updateTask('end_date', $(this).val(), task_id);
    });

    $(document).off('click', '.change-priority').on('click', '.change-priority', function () {
        task_id = $('.task-details').attr('data-task-id');
        field = $(this).attr('data-task-field');
        var priority = $(this).attr('data-value');
        new_priority = '/assets/task_' + priority.toLowerCase() + '.png';
        $(this).parents('ul').prev().find('img').attr('src', new_priority);
        updateTask(field, priority, task_id);
        $('.priority-dropdown').hide();
    });


    $(document).off('click', '.assigned-people').on('click', '.assigned-people', function () {
        $('.unassigned-people').attr('data-assigned-user', $(this).attr('data-assigned-user-id'));
        var $parent = $(this).offsetParent();
        parentOffset = $('.assign-people').offset();
        childOffser = $(this).offset();
        offsetLeft = childOffser.left - parentOffset.left - 5;
        if(offsetLeft < 0)
          offsetLeft = 0;
        $('.unassigned-pophover').css('left', offsetLeft).toggle();
        $('.assigned-people-list').hide();
    });

    $(document).off('click', '.unassigned-people').on('click', '.unassigned-people', function () {
        task_id = $('.task-details').attr('data-task-id');
        user_id = $(this).attr('data-assigned-user');
        unassignedPeople(user_id, task_id);
        $('.unassigned-pophover').hide();
    });

    $(document).off('click', '.assigned-new-people').on('click', '.assigned-new-people', function () {
        if ($(this).find('ul li').length == 0) {
            $('#assigned-list').html("<li class='no-assign-user text-center'> No more user </li>");
        }
        else{
            $('.no-assign-user').remove();
        }
        $('.assigned-people-list').toggle();
        $('.unassigned-pophover').hide();
    });

    $(document).off('click', '.assigned-in-task').on('click', '.assigned-in-task', function () {
        task_id = $('.task-details').attr('data-task-id');
        user_id = $(this).attr('data-value');
        assignedPeople(user_id, task_id);
        $(this).parent().remove();
        $('.assigned-people-list').hide();
    });

    function updateTask(field, value, task_id) {
        $.ajax({
            url: '/projects/' + current_project_id + '/tasks/' + task_id,
            type: 'put',
            data: {field: field, value: value},
            dataType: 'script',
            success: function () {
                popupMessage('Update task status', 'info');
            },
            error: function () {
                popupMessage('Error', 'error');
            }
        });
    }


    function updateposition(positions) {
        $.ajax({
            url: '/update_position',
            type: 'POST',
            data: positions,
            dataType: 'script',
            success: function () {
                popupMessage('Update task status', 'info');
            },
            error: function () {
                popupMessage('Error', 'error');
            }
        });
    }

    function assignedPeople(user_id, task_id) {
        $.ajax({
            url: '/projects/' + current_project_id + '/tasks/' + task_id + '/assign',
            type: 'post',
            data: {user_id: user_id},
            dataType: 'html',
            async: false,
            success: function (data) {
//              $('.assign-people').prepend(data);
                popupMessage('Assigned new people in this task.', 'info');
            },
            error: function () {
                popupMessage('Error', 'error');
            }
        });
    }

    function unassignedPeople(user_id, task_id) {
        $.ajax({
            url: '/projects/' + current_project_id + '/tasks/' + task_id + '/unassign',
            type: 'DELETE',
            data: {user_id: user_id},
            dataType: 'html',
            async: false,
            success: function (data) {
                $('#assign-user-' + user_id + '-'+task_id).parent().remove();
                $('#assigned-list').append(data);
                popupMessage('Unassigned people from this task.', 'info');
            },
            error: function () {
                popupMessage('Error', 'error');
            }
        });
    }

    $(document).off('mouseenter, mouseleave', '.attachment-item').on({
        mouseenter: function(){
            $(this).find('.attachment-hover-details').css('height', 'auto').stop().slideDown('fast');
        },
        mouseleave: function(){
            $(this).find('.attachment-hover-details').stop().slideUp('fast');
        }
    }, '.attachment-item');


    $(document).on('click', 'ul.notification-list li a', function(e) {
        e.preventDefault();
        url = $(this).attr('href');
        if (url == '') {
            popupMessage('internal error', 'error');
            return false;
        }
        $.ajax({
            url: url,
            type: 'get',
            dataType: 'script',
            success: function (res) {
//                $('#x-large-modal').modal('show');
//                $('#x-large-modal .modal-body').html(res);
            }
        });
    });

    $(document).off('click', '.quick-view').on('click', '.quick-view', function() {
        show_attachment($(this).parents('.attachment-item').find('img').first().attr('src'));
    });

    $(document).on('click', '.attachment-overlay, .close-attachment', function() {
        $(this).remove();
        $(".attachment-details-wrap, .attachment-overlay").remove();
    });
}

$(document).ready(function () {
    var current_project_id = $('#dashboard').attr('data-project-id');
    $('.notification-list').perfectScrollbar();
    $('.notification-list').scrollTop(0);
    $('.notification-list').scroll(function () {
        var count = $(this).find(("ul li")).length;
        if ($(this).scrollTop() + $(this).innerHeight() == this.scrollHeight) {
            $.ajax({
                url: '/notification',
                type: 'POST',
                dataType: 'script',
                data: {count: count, project_id: current_project_id},
                success: function (res) {

                },
                error: function (e) {

                }
            });
        }
    });

    var pubnub = PUBNUB({
        publish_key: 'pub-c-c4cb0923-f0e6-43cf-b514-86be9bf01cea',
        subscribe_key: 'sub-c-6386dc38-0034-11e4-b698-02ee2ddab7fe',
        origin: 'pubsub.pubnub.com',
        ssl: true
    });

    pubnub.subscribe({
        channel: 'channel_' + current_project_id,
        connect: function () {
            //popupMessage('Connect to server', 'info');
        },
        callback: function (message) {
            $response = $.parseJSON(message);
            console.log($response);
            if ($response.action == 'update') {
                update_task($response);
            }
            else if ($response.action == 'create') {
                new_task($response);
            }
            else if ($response.action == 'assign_member') {
                assign_task_member($response);
            }
            else if($response.action == 'remove') {
                remove_task($response);
            }
            else if ($response.action == 'chk_create')   {
                  chk_create($response)
            }

            else if ($response.action == 'chk_list_comp')   {
                chk_list_comp($response)
            }

            else if ($response.action == 'chk_list_dest')   {

                chk_list_dest($response)
            }

            else if ($response.action == 'chk_list_create')   {
                chk_list_create($response)
            }

            else if ($response.action == 'chk_list_remove')   {
                chk_list_remove($response)
            }

            else if ($response.action == 'chk_list_edit')   {
                chk_list_edit($response)
            }

            else if ($response.action == 'attachment_notification')   {
                attachment_notification($response)
            }

            else if ($response.action == 'comment_notification')   {
                comment_notification($response)
            }
        }
    });

    $('.slide-notification-icon').click(function() {
        var slider = $('.slide-notification-wrapper');
        var pos = slider.position();
        slider_width = slider.width();
        window_width = $(window).width();
        if(window_width < (pos.left + slider_width)) {
            slider.animate({
                right: 0
            });
        }
        else {
            slider.animate({
                right: '-' + slider_width
            });
        }
    })
});